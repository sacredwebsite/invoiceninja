{"version":3,"sources":["Chart.js"],"names":["window","Chart","context","calculateOffset","val","calculatedScale","scaleHop","outerValue","steps","stepValue","adjustedValue","graphMin","scalingFactor","CapValue","animationLoop","config","drawScale","drawData","ctx","animateFrame","easeAdjustedAnimationPercent","easingFunction","percentAnimComplete","clear","scaleOverlay","animLoop","animFrameAmount","requestAnimFrame","onAnimationComplete","animationSteps","Number","MAX_VALUE","animationOptions","animationEasing","calculateScale","drawingHeight","maxSteps","minSteps","maxValue","minValue","labelTemplateString","calculateOrderOfMagnitude","Math","floor","log","LN10","graphMax","graphRange","numberOfSteps","valueRange","rangeOrderOfMagnitude","pow","ceil","round","labels","populateLabels","i","push","tmpl","value","toFixed","getDecimalPlaces","Max","array","max","apply","Min","min","Default","userDeclared","valueIfFalse","isNumber","n","isNaN","parseFloat","isFinite","valueToCap","num","toString","split","length","mergeChartConfig","defaults","userDefined","returnObj","attrname","str","data","fn","test","Function","replace","join","cache","document","getElementById","innerHTML","chart","this","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","PI","easeOutSine","sin","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","sqrt","easeOutCirc","easeInOutCirc","easeInElastic","s","p","a","abs","asin","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","width","canvas","height","devicePixelRatio","style","scale","PolarArea","options","scaleOverride","scaleSteps","scaleStepWidth","scaleStartValue","scaleShowLine","scaleLineColor","scaleLineWidth","scaleShowLabels","scaleLabel","scaleFontFamily","scaleFontSize","scaleFontStyle","scaleFontColor","scaleShowLabelBackdrop","scaleBackdropColor","scaleBackdropPaddingY","scaleBackdropPaddingX","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","animation","animateRotate","animateScale","Radar","angleShowLineOut","angleLineColor","angleLineWidth","pointLabelFontFamily","pointLabelFontStyle","pointLabelFontSize","pointLabelFontColor","pointDot","pointDotRadius","pointDotStrokeWidth","datasetStroke","datasetStrokeWidth","datasetFill","Pie","Doughnut","percentageInnerCutout","Line","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","bezierCurve","Bar","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","c","clearRect","calculateDrawingSizes","maxSize","labelHeight","scaleHeight","beginPath","arc","strokeStyle","lineWidth","stroke","textAlign","font","label","textWidth","measureText","fillStyle","rect","fill","textBaseline","fillText","drawAllSegments","animationDecimal","startAngle","angleStep","scaleAnimation","rotateAnimation","lineTo","closePath","color","getValueBounds","upperValue","MIN_VALUE","lowerValue","valueBounds","drawAllDataPoints","rotationDegree","datasets","save","translate","moveTo","j","rotate","fillColor","strokeColor","pointColor","pointStrokeColor","k","restore","h","opposite","adjacent","labelLength","textMeasurement","drawPieSegments","cumulativeAngle","segmentAngle","segmentTotal","pieRadius","doughnutRadius","cutoutRadius","drawLines","animPc","yPos","dataSet","iteration","xAxisPosY","xPos","yAxisPosX","valueHop","bezierCurveTo","widestXLabel","xAxisLength","rotateLabels","calculateXAxisSize","longestText","measuredText","textLength","drawBars","barOffset","barWidth","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout"],"mappings":"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","file":"Chart.min.js","sourcesContent":["/*!\n * Chart.js\n * http://chartjs.org/\n *\n * Copyright 2013 Nick Downie\n * Released under the MIT license\n * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md\n */\n\n//Define the global Chart Variable as a class.\nwindow.Chart = function(context){\n\n\tvar chart = this;\n\t\n\t\n\t//Easing functions adapted from Robert Penner's easing equations\n\t//http://www.robertpenner.com/easing/\n\t\n\tvar animationOptions = {\n\t\tlinear : function (t){\n\t\t\treturn t;\n\t\t},\n\t\teaseInQuad: function (t) {\n\t\t\treturn t*t;\n\t\t},\n\t\teaseOutQuad: function (t) {\n\t\t\treturn -1 *t*(t-2);\n\t\t},\n\t\teaseInOutQuad: function (t) {\n\t\t\tif ((t/=1/2) < 1) return 1/2*t*t;\n\t\t\treturn -1/2 * ((--t)*(t-2) - 1);\n\t\t},\n\t\teaseInCubic: function (t) {\n\t\t\treturn t*t*t;\n\t\t},\n\t\teaseOutCubic: function (t) {\n\t\t\treturn 1*((t=t/1-1)*t*t + 1);\n\t\t},\n\t\teaseInOutCubic: function (t) {\n\t\t\tif ((t/=1/2) < 1) return 1/2*t*t*t;\n\t\t\treturn 1/2*((t-=2)*t*t + 2);\n\t\t},\n\t\teaseInQuart: function (t) {\n\t\t\treturn t*t*t*t;\n\t\t},\n\t\teaseOutQuart: function (t) {\n\t\t\treturn -1 * ((t=t/1-1)*t*t*t - 1);\n\t\t},\n\t\teaseInOutQuart: function (t) {\n\t\t\tif ((t/=1/2) < 1) return 1/2*t*t*t*t;\n\t\t\treturn -1/2 * ((t-=2)*t*t*t - 2);\n\t\t},\n\t\teaseInQuint: function (t) {\n\t\t\treturn 1*(t/=1)*t*t*t*t;\n\t\t},\n\t\teaseOutQuint: function (t) {\n\t\t\treturn 1*((t=t/1-1)*t*t*t*t + 1);\n\t\t},\n\t\teaseInOutQuint: function (t) {\n\t\t\tif ((t/=1/2) < 1) return 1/2*t*t*t*t*t;\n\t\t\treturn 1/2*((t-=2)*t*t*t*t + 2);\n\t\t},\n\t\teaseInSine: function (t) {\n\t\t\treturn -1 * Math.cos(t/1 * (Math.PI/2)) + 1;\n\t\t},\n\t\teaseOutSine: function (t) {\n\t\t\treturn 1 * Math.sin(t/1 * (Math.PI/2));\n\t\t},\n\t\teaseInOutSine: function (t) {\n\t\t\treturn -1/2 * (Math.cos(Math.PI*t/1) - 1);\n\t\t},\n\t\teaseInExpo: function (t) {\n\t\t\treturn (t==0) ? 1 : 1 * Math.pow(2, 10 * (t/1 - 1));\n\t\t},\n\t\teaseOutExpo: function (t) {\n\t\t\treturn (t==1) ? 1 : 1 * (-Math.pow(2, -10 * t/1) + 1);\n\t\t},\n\t\teaseInOutExpo: function (t) {\n\t\t\tif (t==0) return 0;\n\t\t\tif (t==1) return 1;\n\t\t\tif ((t/=1/2) < 1) return 1/2 * Math.pow(2, 10 * (t - 1));\n\t\t\treturn 1/2 * (-Math.pow(2, -10 * --t) + 2);\n\t\t\t},\n\t\teaseInCirc: function (t) {\n\t\t\tif (t>=1) return t;\n\t\t\treturn -1 * (Math.sqrt(1 - (t/=1)*t) - 1);\n\t\t},\n\t\teaseOutCirc: function (t) {\n\t\t\treturn 1 * Math.sqrt(1 - (t=t/1-1)*t);\n\t\t},\n\t\teaseInOutCirc: function (t) {\n\t\t\tif ((t/=1/2) < 1) return -1/2 * (Math.sqrt(1 - t*t) - 1);\n\t\t\treturn 1/2 * (Math.sqrt(1 - (t-=2)*t) + 1);\n\t\t},\n\t\teaseInElastic: function (t) {\n\t\t\tvar s=1.70158;var p=0;var a=1;\n\t\t\tif (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;\n\t\t\tif (a < Math.abs(1)) { a=1; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (1/a);\n\t\t\treturn -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));\n\t\t},\n\t\teaseOutElastic: function (t) {\n\t\t\tvar s=1.70158;var p=0;var a=1;\n\t\t\tif (t==0) return 0;  if ((t/=1)==1) return 1;  if (!p) p=1*.3;\n\t\t\tif (a < Math.abs(1)) { a=1; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (1/a);\n\t\t\treturn a*Math.pow(2,-10*t) * Math.sin( (t*1-s)*(2*Math.PI)/p ) + 1;\n\t\t},\n\t\teaseInOutElastic: function (t) {\n\t\t\tvar s=1.70158;var p=0;var a=1;\n\t\t\tif (t==0) return 0;  if ((t/=1/2)==2) return 1;  if (!p) p=1*(.3*1.5);\n\t\t\tif (a < Math.abs(1)) { a=1; var s=p/4; }\n\t\t\telse var s = p/(2*Math.PI) * Math.asin (1/a);\n\t\t\tif (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p ));\n\t\t\treturn a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*1-s)*(2*Math.PI)/p )*.5 + 1;\n\t\t},\n\t\teaseInBack: function (t) {\n\t\t\tvar s = 1.70158;\n\t\t\treturn 1*(t/=1)*t*((s+1)*t - s);\n\t\t},\n\t\teaseOutBack: function (t) {\n\t\t\tvar s = 1.70158;\n\t\t\treturn 1*((t=t/1-1)*t*((s+1)*t + s) + 1);\n\t\t},\n\t\teaseInOutBack: function (t) {\n\t\t\tvar s = 1.70158; \n\t\t\tif ((t/=1/2) < 1) return 1/2*(t*t*(((s*=(1.525))+1)*t - s));\n\t\t\treturn 1/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);\n\t\t},\n\t\teaseInBounce: function (t) {\n\t\t\treturn 1 - animationOptions.easeOutBounce (1-t);\n\t\t},\n\t\teaseOutBounce: function (t) {\n\t\t\tif ((t/=1) < (1/2.75)) {\n\t\t\t\treturn 1*(7.5625*t*t);\n\t\t\t} else if (t < (2/2.75)) {\n\t\t\t\treturn 1*(7.5625*(t-=(1.5/2.75))*t + .75);\n\t\t\t} else if (t < (2.5/2.75)) {\n\t\t\t\treturn 1*(7.5625*(t-=(2.25/2.75))*t + .9375);\n\t\t\t} else {\n\t\t\t\treturn 1*(7.5625*(t-=(2.625/2.75))*t + .984375);\n\t\t\t}\n\t\t},\n\t\teaseInOutBounce: function (t) {\n\t\t\tif (t < 1/2) return animationOptions.easeInBounce (t*2) * .5;\n\t\t\treturn animationOptions.easeOutBounce (t*2-1) * .5 + 1*.5;\n\t\t}\n\t};\n\n\t//Variables global to the chart\n\tvar width = context.canvas.width;\n\tvar height = context.canvas.height;\n\n\n\t//High pixel density displays - multiply the size of the canvas height/width by the device pixel ratio, then scale.\n\tif (window.devicePixelRatio) {\n\t\tcontext.canvas.style.width = width + \"px\";\n\t\tcontext.canvas.style.height = height + \"px\";\n\t\tcontext.canvas.height = height * window.devicePixelRatio;\n\t\tcontext.canvas.width = width * window.devicePixelRatio;\n\t\tcontext.scale(window.devicePixelRatio, window.devicePixelRatio);\n\t}\n\n\tthis.PolarArea = function(data,options){\n\t\n\t\tchart.PolarArea.defaults = {\n\t\t\tscaleOverlay : true,\n\t\t\tscaleOverride : false,\n\t\t\tscaleSteps : null,\n\t\t\tscaleStepWidth : null,\n\t\t\tscaleStartValue : null,\n\t\t\tscaleShowLine : true,\n\t\t\tscaleLineColor : \"rgba(0,0,0,.1)\",\n\t\t\tscaleLineWidth : 1,\n\t\t\tscaleShowLabels : true,\n\t\t\tscaleLabel : \"<%=value%>\",\n\t\t\tscaleFontFamily : \"'Arial'\",\n\t\t\tscaleFontSize : 12,\n\t\t\tscaleFontStyle : \"normal\",\n\t\t\tscaleFontColor : \"#666\",\n\t\t\tscaleShowLabelBackdrop : true,\n\t\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\n\t\t\tscaleBackdropPaddingY : 2,\n\t\t\tscaleBackdropPaddingX : 2,\n\t\t\tsegmentShowStroke : true,\n\t\t\tsegmentStrokeColor : \"#fff\",\n\t\t\tsegmentStrokeWidth : 2,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 100,\n\t\t\tanimationEasing : \"easeOutBounce\",\n\t\t\tanimateRotate : true,\n\t\t\tanimateScale : false,\n\t\t\tonAnimationComplete : null\n\t\t};\n\t\t\n\t\tvar config = (options)? mergeChartConfig(chart.PolarArea.defaults,options) : chart.PolarArea.defaults;\n\t\t\n\t\treturn new PolarArea(data,config,context);\n\t};\n\n\tthis.Radar = function(data,options){\n\t\n\t\tchart.Radar.defaults = {\n\t\t\tscaleOverlay : false,\n\t\t\tscaleOverride : false,\n\t\t\tscaleSteps : null,\n\t\t\tscaleStepWidth : null,\n\t\t\tscaleStartValue : null,\n\t\t\tscaleShowLine : true,\n\t\t\tscaleLineColor : \"rgba(0,0,0,.1)\",\n\t\t\tscaleLineWidth : 1,\n\t\t\tscaleShowLabels : false,\n\t\t\tscaleLabel : \"<%=value%>\",\n\t\t\tscaleFontFamily : \"'Arial'\",\n\t\t\tscaleFontSize : 12,\n\t\t\tscaleFontStyle : \"normal\",\n\t\t\tscaleFontColor : \"#666\",\n\t\t\tscaleShowLabelBackdrop : true,\n\t\t\tscaleBackdropColor : \"rgba(255,255,255,0.75)\",\n\t\t\tscaleBackdropPaddingY : 2,\n\t\t\tscaleBackdropPaddingX : 2,\n\t\t\tangleShowLineOut : true,\n\t\t\tangleLineColor : \"rgba(0,0,0,.1)\",\n\t\t\tangleLineWidth : 1,\t\t\t\n\t\t\tpointLabelFontFamily : \"'Arial'\",\n\t\t\tpointLabelFontStyle : \"normal\",\n\t\t\tpointLabelFontSize : 12,\n\t\t\tpointLabelFontColor : \"#666\",\n\t\t\tpointDot : true,\n\t\t\tpointDotRadius : 3,\n\t\t\tpointDotStrokeWidth : 1,\n\t\t\tdatasetStroke : true,\n\t\t\tdatasetStrokeWidth : 2,\n\t\t\tdatasetFill : true,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 60,\n\t\t\tanimationEasing : \"easeOutQuart\",\n\t\t\tonAnimationComplete : null\n\t\t};\n\t\t\n\t\tvar config = (options)? mergeChartConfig(chart.Radar.defaults,options) : chart.Radar.defaults;\n\n\t\treturn new Radar(data,config,context);\n\t};\n\t\n\tthis.Pie = function(data,options){\n\t\tchart.Pie.defaults = {\n\t\t\tsegmentShowStroke : true,\n\t\t\tsegmentStrokeColor : \"#fff\",\n\t\t\tsegmentStrokeWidth : 2,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 100,\n\t\t\tanimationEasing : \"easeOutBounce\",\n\t\t\tanimateRotate : true,\n\t\t\tanimateScale : false,\n\t\t\tonAnimationComplete : null\n\t\t};\t\t\n\n\t\tvar config = (options)? mergeChartConfig(chart.Pie.defaults,options) : chart.Pie.defaults;\n\t\t\n\t\treturn new Pie(data,config,context);\t\t\t\t\n\t};\n\t\n\tthis.Doughnut = function(data,options){\n\t\n\t\tchart.Doughnut.defaults = {\n\t\t\tsegmentShowStroke : true,\n\t\t\tsegmentStrokeColor : \"#fff\",\n\t\t\tsegmentStrokeWidth : 2,\n\t\t\tpercentageInnerCutout : 50,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 100,\n\t\t\tanimationEasing : \"easeOutBounce\",\n\t\t\tanimateRotate : true,\n\t\t\tanimateScale : false,\n\t\t\tonAnimationComplete : null\n\t\t};\t\t\n\n\t\tvar config = (options)? mergeChartConfig(chart.Doughnut.defaults,options) : chart.Doughnut.defaults;\n\t\t\n\t\treturn new Doughnut(data,config,context);\t\t\t\n\t\t\n\t};\n\n\tthis.Line = function(data,options){\n\t\n\t\tchart.Line.defaults = {\n\t\t\tscaleOverlay : false,\n\t\t\tscaleOverride : false,\n\t\t\tscaleSteps : null,\n\t\t\tscaleStepWidth : null,\n\t\t\tscaleStartValue : null,\n\t\t\tscaleLineColor : \"rgba(0,0,0,.1)\",\n\t\t\tscaleLineWidth : 1,\n\t\t\tscaleShowLabels : true,\n\t\t\tscaleLabel : \"<%=value%>\",\n\t\t\tscaleFontFamily : \"'Arial'\",\n\t\t\tscaleFontSize : 12,\n\t\t\tscaleFontStyle : \"normal\",\n\t\t\tscaleFontColor : \"#666\",\n\t\t\tscaleShowGridLines : true,\n\t\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\t\t\tscaleGridLineWidth : 1,\n\t\t\tbezierCurve : true,\n\t\t\tpointDot : true,\n\t\t\tpointDotRadius : 4,\n\t\t\tpointDotStrokeWidth : 2,\n\t\t\tdatasetStroke : true,\n\t\t\tdatasetStrokeWidth : 2,\n\t\t\tdatasetFill : true,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 60,\n\t\t\tanimationEasing : \"easeOutQuart\",\n\t\t\tonAnimationComplete : null\n\t\t};\t\t\n\t\tvar config = (options) ? mergeChartConfig(chart.Line.defaults,options) : chart.Line.defaults;\n\t\t\n\t\treturn new Line(data,config,context);\n\t}\n\t\n\tthis.Bar = function(data,options){\n\t\tchart.Bar.defaults = {\n\t\t\tscaleOverlay : false,\n\t\t\tscaleOverride : false,\n\t\t\tscaleSteps : null,\n\t\t\tscaleStepWidth : null,\n\t\t\tscaleStartValue : null,\n\t\t\tscaleLineColor : \"rgba(0,0,0,.1)\",\n\t\t\tscaleLineWidth : 1,\n\t\t\tscaleShowLabels : true,\n\t\t\tscaleLabel : \"<%=value%>\",\n\t\t\tscaleFontFamily : \"'Arial'\",\n\t\t\tscaleFontSize : 12,\n\t\t\tscaleFontStyle : \"normal\",\n\t\t\tscaleFontColor : \"#666\",\n\t\t\tscaleShowGridLines : true,\n\t\t\tscaleGridLineColor : \"rgba(0,0,0,.05)\",\n\t\t\tscaleGridLineWidth : 1,\n\t\t\tbarShowStroke : true,\n\t\t\tbarStrokeWidth : 2,\n\t\t\tbarValueSpacing : 5,\n\t\t\tbarDatasetSpacing : 1,\n\t\t\tanimation : true,\n\t\t\tanimationSteps : 60,\n\t\t\tanimationEasing : \"easeOutQuart\",\n\t\t\tonAnimationComplete : null\n\t\t};\t\t\n\t\tvar config = (options) ? mergeChartConfig(chart.Bar.defaults,options) : chart.Bar.defaults;\n\t\t\n\t\treturn new Bar(data,config,context);\t\t\n\t}\n\t\n\tvar clear = function(c){\n\t\tc.clearRect(0, 0, width, height);\n\t};\n\n\tvar PolarArea = function(data,config,ctx){\n\t\tvar maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString;\t\t\n\t\t\n\t\t\n\t\tcalculateDrawingSizes();\n\t\t\n\t\tvalueBounds = getValueBounds();\n\n\t\tlabelTemplateString = (config.scaleShowLabels)? config.scaleLabel : null;\n\n\t\t//Check and set the scale\n\t\tif (!config.scaleOverride){\n\t\t\t\n\t\t\tcalculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);\n\t\t}\n\t\telse {\n\t\t\tcalculatedScale = {\n\t\t\t\tsteps : config.scaleSteps,\n\t\t\t\tstepValue : config.scaleStepWidth,\n\t\t\t\tgraphMin : config.scaleStartValue,\n\t\t\t\tlabels : []\n\t\t\t}\n\t\t\tpopulateLabels(labelTemplateString, calculatedScale.labels,calculatedScale.steps,config.scaleStartValue,config.scaleStepWidth);\n\t\t}\n\t\t\n\t\tscaleHop = maxSize/(calculatedScale.steps);\n\n\t\t//Wrap in an animation loop wrapper\n\t\tanimationLoop(config,drawScale,drawAllSegments,ctx);\n\n\t\tfunction calculateDrawingSizes(){\n\t\t\tmaxSize = (Min([width,height])/2);\n\t\t\t//Remove whatever is larger - the font size or line width.\n\t\t\t\n\t\t\tmaxSize -= Max([config.scaleFontSize*0.5,config.scaleLineWidth*0.5]);\n\t\t\t\n\t\t\tlabelHeight = config.scaleFontSize*2;\n\t\t\t//If we're drawing the backdrop - add the Y padding to the label height and remove from drawing region.\n\t\t\tif (config.scaleShowLabelBackdrop){\n\t\t\t\tlabelHeight += (2 * config.scaleBackdropPaddingY);\n\t\t\t\tmaxSize -= config.scaleBackdropPaddingY*1.5;\n\t\t\t}\n\t\t\t\n\t\t\tscaleHeight = maxSize;\n\t\t\t//If the label height is less than 5, set it to 5 so we don't have lines on top of each other.\n\t\t\tlabelHeight = Default(labelHeight,5);\n\t\t}\n\t\tfunction drawScale(){\n\t\t\tfor (var i=0; i<calculatedScale.steps; i++){\n\t\t\t\t//If the line object is there\n\t\t\t\tif (config.scaleShowLine){\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(width/2, height/2, scaleHop * (i + 1), 0, (Math.PI * 2), true);\n\t\t\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\n\t\t\t\tif (config.scaleShowLabels){\n\t\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize + \"px \" + config.scaleFontFamily;\n \t\t\t\t\tvar label =  calculatedScale.labels[i];\n\t\t\t\t\t//If the backdrop object is within the font object\n\t\t\t\t\tif (config.scaleShowLabelBackdrop){\n\t\t\t\t\t\tvar textWidth = ctx.measureText(label).width;\n\t\t\t\t\t\tctx.fillStyle = config.scaleBackdropColor;\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.rect(\n\t\t\t\t\t\t\tMath.round(width/2 - textWidth/2 - config.scaleBackdropPaddingX),     //X\n\t\t\t\t\t\t\tMath.round(height/2 - (scaleHop * (i + 1)) - config.scaleFontSize*0.5 - config.scaleBackdropPaddingY),//Y\n\t\t\t\t\t\t\tMath.round(textWidth + (config.scaleBackdropPaddingX*2)), //Width\n\t\t\t\t\t\t\tMath.round(config.scaleFontSize + (config.scaleBackdropPaddingY*2)) //Height\n\t\t\t\t\t\t);\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t}\n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\tctx.fillStyle = config.scaleFontColor;\n\t\t\t\t\tctx.fillText(label,width/2,height/2 - (scaleHop * (i + 1)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction drawAllSegments(animationDecimal){\n\t\t\tvar startAngle = -Math.PI/2,\n\t\t\tangleStep = (Math.PI*2)/data.length,\n\t\t\tscaleAnimation = 1,\n\t\t\trotateAnimation = 1;\n\t\t\tif (config.animation) {\n\t\t\t\tif (config.animateScale) {\n\t\t\t\t\tscaleAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t\tif (config.animateRotate){\n\t\t\t\t\trotateAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i=0; i<data.length; i++){\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(width/2,height/2,scaleAnimation * calculateOffset(data[i].value,calculatedScale,scaleHop),startAngle, startAngle + rotateAnimation*angleStep, false);\n\t\t\t\tctx.lineTo(width/2,height/2);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fillStyle = data[i].color;\n\t\t\t\tctx.fill();\n\n\t\t\t\tif(config.segmentShowStroke){\n\t\t\t\t\tctx.strokeStyle = config.segmentStrokeColor;\n\t\t\t\t\tctx.lineWidth = config.segmentStrokeWidth;\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\tstartAngle += rotateAnimation*angleStep;\n\t\t\t}\n\t\t}\n\t\tfunction getValueBounds() {\n\t\t\tvar upperValue = Number.MIN_VALUE;\n\t\t\tvar lowerValue = Number.MAX_VALUE;\n\t\t\tfor (var i=0; i<data.length; i++){\n\t\t\t\tif (data[i].value > upperValue) {upperValue = data[i].value;}\n\t\t\t\tif (data[i].value < lowerValue) {lowerValue = data[i].value;}\n\t\t\t};\n\n\t\t\tvar maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));\n\t\t\tvar minSteps = Math.floor((scaleHeight / labelHeight*0.5));\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmaxValue : upperValue,\n\t\t\t\tminValue : lowerValue,\n\t\t\t\tmaxSteps : maxSteps,\n\t\t\t\tminSteps : minSteps\n\t\t\t};\n\t\t\t\n\n\t\t}\n\t}\n\n\tvar Radar = function (data,config,ctx) {\n\t\tvar maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString;\t\n\t\t\t\n\t\t//If no labels are defined set to an empty array, so referencing length for looping doesn't blow up.\n\t\tif (!data.labels) data.labels = [];\n\t\t\n\t\tcalculateDrawingSizes();\n\n\t\tvar valueBounds = getValueBounds();\n\n\t\tlabelTemplateString = (config.scaleShowLabels)? config.scaleLabel : null;\n\n\t\t//Check and set the scale\n\t\tif (!config.scaleOverride){\n\t\t\t\n\t\t\tcalculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);\n\t\t}\n\t\telse {\n\t\t\tcalculatedScale = {\n\t\t\t\tsteps : config.scaleSteps,\n\t\t\t\tstepValue : config.scaleStepWidth,\n\t\t\t\tgraphMin : config.scaleStartValue,\n\t\t\t\tlabels : []\n\t\t\t}\n\t\t\tpopulateLabels(labelTemplateString, calculatedScale.labels,calculatedScale.steps,config.scaleStartValue,config.scaleStepWidth);\n\t\t}\n\t\t\n\t\tscaleHop = maxSize/(calculatedScale.steps);\n\t\t\n\t\tanimationLoop(config,drawScale,drawAllDataPoints,ctx);\n\t\t\n\t\t//Radar specific functions.\n\t\tfunction drawAllDataPoints(animationDecimal){\n\t\t\tvar rotationDegree = (2*Math.PI)/data.datasets[0].data.length;\n\n\t\t\tctx.save();\n\t\t\t//translate to the centre of the canvas.\n\t\t\tctx.translate(width/2,height/2);\n\t\t\t\n\t\t\t//We accept multiple data sets for radar charts, so show loop through each set\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.moveTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[0],calculatedScale,scaleHop)));\n\t\t\t\tfor (var j=1; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tctx.rotate(rotationDegree);\t\n\t\t\t\t\tctx.lineTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)));\n\t\t\t\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tctx.fillStyle = data.datasets[i].fillColor;\n\t\t\t\tctx.strokeStyle = data.datasets[i].strokeColor;\n\t\t\t\tctx.lineWidth = config.datasetStrokeWidth;\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\tif (config.pointDot){\n\t\t\t\t\tctx.fillStyle = data.datasets[i].pointColor;\n\t\t\t\t\tctx.strokeStyle = data.datasets[i].pointStrokeColor;\n\t\t\t\t\tctx.lineWidth = config.pointDotStrokeWidth;\n\t\t\t\t\tfor (var k=0; k<data.datasets[i].data.length; k++){\n\t\t\t\t\t\tctx.rotate(rotationDegree);\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.arc(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[k],calculatedScale,scaleHop)),config.pointDotRadius,2*Math.PI,false);\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tctx.rotate(rotationDegree);\n\t\t\t\t\n\t\t\t}\n\t\t\tctx.restore();\n\t\t\t\n\t\t\t\n\t\t}\n\t\tfunction drawScale(){\n\t\t\tvar rotationDegree = (2*Math.PI)/data.datasets[0].data.length;\n\t\t\tctx.save();\n\t\t    ctx.translate(width / 2, height / 2);\t\n\t\t\t\n\t\t\tif (config.angleShowLineOut){\n\t\t\t\tctx.strokeStyle = config.angleLineColor;\t\t    \t    \n\t\t\t\tctx.lineWidth = config.angleLineWidth;\n\t\t\t\tfor (var h=0; h<data.datasets[0].data.length; h++){\n\t\t\t\t\t\n\t\t\t\t    ctx.rotate(rotationDegree);\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(0,0);\n\t\t\t\t\tctx.lineTo(0,-maxSize);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i=0; i<calculatedScale.steps; i++){\n\t\t\t\tctx.beginPath();\n\t\t\t\t\n\t\t\t\tif(config.scaleShowLine){\n\t\t\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\t\t\tctx.moveTo(0,-scaleHop * (i+1));\t\t\t\t\t\n\t\t\t\t\tfor (var j=0; j<data.datasets[0].data.length; j++){\n\t\t\t\t\t    ctx.rotate(rotationDegree);\n\t\t\t\t\t\tctx.lineTo(0,-scaleHop * (i+1));\n\t\t\t\t\t}\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.stroke();\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (config.scaleShowLabels){\t\t\t\t\n\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize+\"px \" + config.scaleFontFamily; \n\t\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\t\n\t\t\t\t\tif (config.scaleShowLabelBackdrop){\n\t\t\t\t\t\tvar textWidth = ctx.measureText(calculatedScale.labels[i]).width;\n\t\t\t\t\t\tctx.fillStyle = config.scaleBackdropColor;\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.rect(\n\t\t\t\t\t\t\tMath.round(- textWidth/2 - config.scaleBackdropPaddingX),     //X\n\t\t\t\t\t\t\tMath.round((-scaleHop * (i + 1)) - config.scaleFontSize*0.5 - config.scaleBackdropPaddingY),//Y\n\t\t\t\t\t\t\tMath.round(textWidth + (config.scaleBackdropPaddingX*2)), //Width\n\t\t\t\t\t\t\tMath.round(config.scaleFontSize + (config.scaleBackdropPaddingY*2)) //Height\n\t\t\t\t\t\t);\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\tctx.fillStyle = config.scaleFontColor;\n\t\t\t\t\tctx.fillText(calculatedScale.labels[i],0,-scaleHop*(i+1));\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tfor (var k=0; k<data.labels.length; k++){\t\t\t\t\n\t\t\tctx.font = config.pointLabelFontStyle + \" \" + config.pointLabelFontSize+\"px \" + config.pointLabelFontFamily;\n\t\t\tctx.fillStyle = config.pointLabelFontColor;\n\t\t\t\tvar opposite = Math.sin(rotationDegree*k) * (maxSize + config.pointLabelFontSize);\n\t\t\t\tvar adjacent = Math.cos(rotationDegree*k) * (maxSize + config.pointLabelFontSize);\n\t\t\t\t\n\t\t\t\tif(rotationDegree*k == Math.PI || rotationDegree*k == 0){\n\t\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t}\n\t\t\t\telse if(rotationDegree*k > Math.PI){\n\t\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tctx.textAlign = \"left\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\t\n\t\t\t\tctx.fillText(data.labels[k],opposite,-adjacent);\n\t\t\t\t\n\t\t\t}\n\t\t\tctx.restore();\n\t\t};\n\t\tfunction calculateDrawingSizes(){\n\t\t\tmaxSize = (Min([width,height])/2);\n\n\t\t\tlabelHeight = config.scaleFontSize*2;\n\t\t\t\n\t\t\tvar labelLength = 0;\n\t\t\tfor (var i=0; i<data.labels.length; i++){\n\t\t\t\tctx.font = config.pointLabelFontStyle + \" \" + config.pointLabelFontSize+\"px \" + config.pointLabelFontFamily;\n\t\t\t\tvar textMeasurement = ctx.measureText(data.labels[i]).width;\n\t\t\t\tif(textMeasurement>labelLength) labelLength = textMeasurement;\n\t\t\t}\n\t\t\t\n\t\t\t//Figure out whats the largest - the height of the text or the width of what's there, and minus it from the maximum usable size.\n\t\t\tmaxSize -= Max([labelLength,((config.pointLabelFontSize/2)*1.5)]);\t\t\t\t\n\t\t\t\n\t\t\tmaxSize -= config.pointLabelFontSize;\n\t\t\tmaxSize = CapValue(maxSize, null, 0);\n\t\t\tscaleHeight = maxSize;\n\t\t\t//If the label height is less than 5, set it to 5 so we don't have lines on top of each other.\n\t\t\tlabelHeight = Default(labelHeight,5);\n\t\t};\n\t\tfunction getValueBounds() {\n\t\t\tvar upperValue = Number.MIN_VALUE;\n\t\t\tvar lowerValue = Number.MAX_VALUE;\n\t\t\t\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tfor (var j=0; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tif (data.datasets[i].data[j] > upperValue){upperValue = data.datasets[i].data[j]}\n\t\t\t\t\tif (data.datasets[i].data[j] < lowerValue){lowerValue = data.datasets[i].data[j]}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));\n\t\t\tvar minSteps = Math.floor((scaleHeight / labelHeight*0.5));\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmaxValue : upperValue,\n\t\t\t\tminValue : lowerValue,\n\t\t\t\tmaxSteps : maxSteps,\n\t\t\t\tminSteps : minSteps\n\t\t\t};\n\t\t\t\n\n\t\t}\n\t}\n\n\tvar Pie = function(data,config,ctx){\n\t\tvar segmentTotal = 0;\n\t\t\n\t\t//In case we have a canvas that is not a square. Minus 5 pixels as padding round the edge.\n\t\tvar pieRadius = Min([height/2,width/2]) - 5;\n\t\t\n\t\tfor (var i=0; i<data.length; i++){\n\t\t\tsegmentTotal += data[i].value;\n\t\t}\n\t\t\n\t\t\n\t\tanimationLoop(config,null,drawPieSegments,ctx);\n\t\t\t\t\n\t\tfunction drawPieSegments (animationDecimal){\n\t\t\tvar cumulativeAngle = -Math.PI/2,\n\t\t\tscaleAnimation = 1,\n\t\t\trotateAnimation = 1;\n\t\t\tif (config.animation) {\n\t\t\t\tif (config.animateScale) {\n\t\t\t\t\tscaleAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t\tif (config.animateRotate){\n\t\t\t\t\trotateAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i=0; i<data.length; i++){\n\t\t\t\tvar segmentAngle = rotateAnimation * ((data[i].value/segmentTotal) * (Math.PI*2));\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(width/2,height/2,scaleAnimation * pieRadius,cumulativeAngle,cumulativeAngle + segmentAngle);\n\t\t\t\tctx.lineTo(width/2,height/2);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fillStyle = data[i].color;\n\t\t\t\tctx.fill();\n\t\t\t\t\n\t\t\t\tif(config.segmentShowStroke){\n\t\t\t\t\tctx.lineWidth = config.segmentStrokeWidth;\n\t\t\t\t\tctx.strokeStyle = config.segmentStrokeColor;\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\tcumulativeAngle += segmentAngle;\n\t\t\t}\t\t\t\n\t\t}\t\t\n\t}\n\n\tvar Doughnut = function(data,config,ctx){\n\t\tvar segmentTotal = 0;\n\t\t\n\t\t//In case we have a canvas that is not a square. Minus 5 pixels as padding round the edge.\n\t\tvar doughnutRadius = Min([height/2,width/2]) - 5;\n\t\t\n\t\tvar cutoutRadius = doughnutRadius * (config.percentageInnerCutout/100);\n\t\t\n\t\tfor (var i=0; i<data.length; i++){\n\t\t\tsegmentTotal += data[i].value;\n\t\t}\n\t\t\n\t\t\n\t\tanimationLoop(config,null,drawPieSegments,ctx);\n\t\t\n\t\t\n\t\tfunction drawPieSegments (animationDecimal){\n\t\t\tvar cumulativeAngle = -Math.PI/2,\n\t\t\tscaleAnimation = 1,\n\t\t\trotateAnimation = 1;\n\t\t\tif (config.animation) {\n\t\t\t\tif (config.animateScale) {\n\t\t\t\t\tscaleAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t\tif (config.animateRotate){\n\t\t\t\t\trotateAnimation = animationDecimal;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i=0; i<data.length; i++){\n\t\t\t\tvar segmentAngle = rotateAnimation * ((data[i].value/segmentTotal) * (Math.PI*2));\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(width/2,height/2,scaleAnimation * doughnutRadius,cumulativeAngle,cumulativeAngle + segmentAngle,false);\n\t\t\t\tctx.arc(width/2,height/2,scaleAnimation * cutoutRadius,cumulativeAngle + segmentAngle,cumulativeAngle,true);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.fillStyle = data[i].color;\n\t\t\t\tctx.fill();\n\t\t\t\t\n\t\t\t\tif(config.segmentShowStroke){\n\t\t\t\t\tctx.lineWidth = config.segmentStrokeWidth;\n\t\t\t\t\tctx.strokeStyle = config.segmentStrokeColor;\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t\tcumulativeAngle += segmentAngle;\n\t\t\t}\t\t\t\n\t\t}\t\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\n\tvar Line = function(data,config,ctx){\n\t\tvar maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString, valueHop,widestXLabel, xAxisLength,yAxisPosX,xAxisPosY, rotateLabels = 0;\n\t\t\t\n\t\tcalculateDrawingSizes();\n\t\t\n\t\tvalueBounds = getValueBounds();\n\t\t//Check and set the scale\n\t\tlabelTemplateString = (config.scaleShowLabels)? config.scaleLabel : \"\";\n\t\tif (!config.scaleOverride){\n\t\t\t\n\t\t\tcalculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);\n\t\t}\n\t\telse {\n\t\t\tcalculatedScale = {\n\t\t\t\tsteps : config.scaleSteps,\n\t\t\t\tstepValue : config.scaleStepWidth,\n\t\t\t\tgraphMin : config.scaleStartValue,\n\t\t\t\tlabels : []\n\t\t\t}\n\t\t\tpopulateLabels(labelTemplateString, calculatedScale.labels,calculatedScale.steps,config.scaleStartValue,config.scaleStepWidth);\n\t\t}\n\t\t\n\t\tscaleHop = Math.floor(scaleHeight/calculatedScale.steps);\n\t\tcalculateXAxisSize();\n\t\tanimationLoop(config,drawScale,drawLines,ctx);\t\t\n\t\t\n\t\tfunction drawLines(animPc){\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tctx.strokeStyle = data.datasets[i].strokeColor;\n\t\t\t\tctx.lineWidth = config.datasetStrokeWidth;\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(yAxisPosX, xAxisPosY - animPc*(calculateOffset(data.datasets[i].data[0],calculatedScale,scaleHop)))\n\n\t\t\t\tfor (var j=1; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tif (config.bezierCurve){\n\t\t\t\t\t\tctx.bezierCurveTo(xPos(j-0.5),yPos(i,j-1),xPos(j-0.5),yPos(i,j),xPos(j),yPos(i,j));\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tctx.lineTo(xPos(j),yPos(i,j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tctx.stroke();\n\t\t\t\tif (config.datasetFill){\n\t\t\t\t\tctx.lineTo(yAxisPosX + (valueHop*(data.datasets[i].data.length-1)),xAxisPosY);\n\t\t\t\t\tctx.lineTo(yAxisPosX,xAxisPosY);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fillStyle = data.datasets[i].fillColor;\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tctx.closePath();\n\t\t\t\t}\n\t\t\t\tif(config.pointDot){\n\t\t\t\t\tctx.fillStyle = data.datasets[i].pointColor;\n\t\t\t\t\tctx.strokeStyle = data.datasets[i].pointStrokeColor;\n\t\t\t\t\tctx.lineWidth = config.pointDotStrokeWidth;\n\t\t\t\t\tfor (var k=0; k<data.datasets[i].data.length; k++){\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.arc(yAxisPosX + (valueHop *k),xAxisPosY - animPc*(calculateOffset(data.datasets[i].data[k],calculatedScale,scaleHop)),config.pointDotRadius,0,Math.PI*2,true);\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction yPos(dataSet,iteration){\n\t\t\t\treturn xAxisPosY - animPc*(calculateOffset(data.datasets[dataSet].data[iteration],calculatedScale,scaleHop));\t\t\t\n\t\t\t}\n\t\t\tfunction xPos(iteration){\n\t\t\t\treturn yAxisPosX + (valueHop * iteration);\n\t\t\t}\n\t\t}\n\t\tfunction drawScale(){\n\t\t\t//X axis line\n\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(width-widestXLabel/2+5,xAxisPosY);\n\t\t\tctx.lineTo(width-(widestXLabel/2)-xAxisLength-5,xAxisPosY);\n\t\t\tctx.stroke();\n\t\t\t\n\t\t\t\n\t\t\tif (rotateLabels > 0){\n\t\t\t\tctx.save();\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t}\n\t\t\tctx.fillStyle = config.scaleFontColor;\n\t\t\tfor (var i=0; i<data.labels.length; i++){\n\t\t\t\tctx.save();\n\t\t\t\tif (rotateLabels > 0){\n\t\t\t\t\tctx.translate(yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize);\n\t\t\t\t\tctx.rotate(-(rotateLabels * (Math.PI/180)));\n\t\t\t\t\tctx.fillText(data.labels[i], 0,0);\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\t\tctx.fillText(data.labels[i], yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize+3);\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(yAxisPosX + i * valueHop, xAxisPosY+3);\n\t\t\t\t\n\t\t\t\t//Check i isnt 0, so we dont go over the Y axis twice.\n\t\t\t\tif(config.scaleShowGridLines && i>0){\n\t\t\t\t\tctx.lineWidth = config.scaleGridLineWidth;\n\t\t\t\t\tctx.strokeStyle = config.scaleGridLineColor;\t\t\t\t\t\n\t\t\t\t\tctx.lineTo(yAxisPosX + i * valueHop, 5);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tctx.lineTo(yAxisPosX + i * valueHop, xAxisPosY+3);\t\t\t\t\n\t\t\t\t}\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t\t\n\t\t\t//Y axis\n\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(yAxisPosX,xAxisPosY+5);\n\t\t\tctx.lineTo(yAxisPosX,5);\n\t\t\tctx.stroke();\n\t\t\t\n\t\t\tctx.textAlign = \"right\";\n\t\t\tctx.textBaseline = \"middle\";\n\t\t\tfor (var j=0; j<calculatedScale.steps; j++){\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(yAxisPosX-3,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\tif (config.scaleShowGridLines){\n\t\t\t\t\tctx.lineWidth = config.scaleGridLineWidth;\n\t\t\t\t\tctx.strokeStyle = config.scaleGridLineColor;\n\t\t\t\t\tctx.lineTo(yAxisPosX + xAxisLength + 5,xAxisPosY - ((j+1) * scaleHop));\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tctx.lineTo(yAxisPosX-0.5,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t\tif (config.scaleShowLabels){\n\t\t\t\t\tctx.fillText(calculatedScale.labels[j],yAxisPosX-8,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tfunction calculateXAxisSize(){\n\t\t\tvar longestText = 1;\n\t\t\t//if we are showing the labels\n\t\t\tif (config.scaleShowLabels){\n\t\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize+\"px \" + config.scaleFontFamily;\n\t\t\t\tfor (var i=0; i<calculatedScale.labels.length; i++){\n\t\t\t\t\tvar measuredText = ctx.measureText(calculatedScale.labels[i]).width;\n\t\t\t\t\tlongestText = (measuredText > longestText)? measuredText : longestText;\n\t\t\t\t}\n\t\t\t\t//Add a little extra padding from the y axis\n\t\t\t\tlongestText +=10;\n\t\t\t}\n\t\t\txAxisLength = width - longestText - widestXLabel;\n\t\t\tvalueHop = Math.floor(xAxisLength/(data.labels.length-1));\t\n\t\t\t\t\n\t\t\tyAxisPosX = width-widestXLabel/2-xAxisLength;\n\t\t\txAxisPosY = scaleHeight + config.scaleFontSize/2;\t\t\t\t\n\t\t}\t\t\n\t\tfunction calculateDrawingSizes(){\n\t\t\tmaxSize = height;\n\n\t\t\t//Need to check the X axis first - measure the length of each text metric, and figure out if we need to rotate by 45 degrees.\n\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize+\"px \" + config.scaleFontFamily;\n\t\t\twidestXLabel = 1;\n\t\t\tfor (var i=0; i<data.labels.length; i++){\n\t\t\t\tvar textLength = ctx.measureText(data.labels[i]).width;\n\t\t\t\t//If the text length is longer - make that equal to longest text!\n\t\t\t\twidestXLabel = (textLength > widestXLabel)? textLength : widestXLabel;\n\t\t\t}\n\t\t\tif (width/data.labels.length < widestXLabel){\n\t\t\t\trotateLabels = 45;\n\t\t\t\tif (width/data.labels.length < Math.cos(rotateLabels) * widestXLabel){\n\t\t\t\t\trotateLabels = 90;\n\t\t\t\t\tmaxSize -= widestXLabel; \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmaxSize -= Math.sin(rotateLabels) * widestXLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmaxSize -= config.scaleFontSize;\n\t\t\t}\n\t\t\t\n\t\t\t//Add a little padding between the x line and the text\n\t\t\tmaxSize -= 5;\n\t\t\t\n\t\t\t\n\t\t\tlabelHeight = config.scaleFontSize;\n\t\t\t\n\t\t\tmaxSize -= labelHeight;\n\t\t\t//Set 5 pixels greater than the font size to allow for a little padding from the X axis.\n\t\t\t\n\t\t\tscaleHeight = maxSize;\n\t\t\t\n\t\t\t//Then get the area above we can safely draw on.\n\t\t\t\n\t\t}\t\t\n\t\tfunction getValueBounds() {\n\t\t\tvar upperValue = Number.MIN_VALUE;\n\t\t\tvar lowerValue = Number.MAX_VALUE;\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tfor (var j=0; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tif ( data.datasets[i].data[j] > upperValue) { upperValue = data.datasets[i].data[j] };\n\t\t\t\t\tif ( data.datasets[i].data[j] < lowerValue) { lowerValue = data.datasets[i].data[j] };\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tvar maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));\n\t\t\tvar minSteps = Math.floor((scaleHeight / labelHeight*0.5));\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmaxValue : upperValue,\n\t\t\t\tminValue : lowerValue,\n\t\t\t\tmaxSteps : maxSteps,\n\t\t\t\tminSteps : minSteps\n\t\t\t};\n\t\t\t\n\t\n\t\t}\n\n\t\t\n\t}\n\t\n\tvar Bar = function(data,config,ctx){\n\t\tvar maxSize, scaleHop, calculatedScale, labelHeight, scaleHeight, valueBounds, labelTemplateString, valueHop,widestXLabel, xAxisLength,yAxisPosX,xAxisPosY,barWidth, rotateLabels = 0;\n\t\t\t\n\t\tcalculateDrawingSizes();\n\t\t\n\t\tvalueBounds = getValueBounds();\n\t\t//Check and set the scale\n\t\tlabelTemplateString = (config.scaleShowLabels)? config.scaleLabel : \"\";\n\t\tif (!config.scaleOverride){\n\t\t\t\n\t\t\tcalculatedScale = calculateScale(scaleHeight,valueBounds.maxSteps,valueBounds.minSteps,valueBounds.maxValue,valueBounds.minValue,labelTemplateString);\n\t\t}\n\t\telse {\n\t\t\tcalculatedScale = {\n\t\t\t\tsteps : config.scaleSteps,\n\t\t\t\tstepValue : config.scaleStepWidth,\n\t\t\t\tgraphMin : config.scaleStartValue,\n\t\t\t\tlabels : []\n\t\t\t}\n\t\t\tpopulateLabels(labelTemplateString, calculatedScale.labels,calculatedScale.steps,config.scaleStartValue,config.scaleStepWidth);\n\t\t}\n\t\t\n\t\tscaleHop = Math.floor(scaleHeight/calculatedScale.steps);\n\t\tcalculateXAxisSize();\n\t\tanimationLoop(config,drawScale,drawBars,ctx);\t\t\n\t\t\n\t\tfunction drawBars(animPc){\n\t\t\tctx.lineWidth = config.barStrokeWidth;\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\t\tctx.fillStyle = data.datasets[i].fillColor;\n\t\t\t\t\tctx.strokeStyle = data.datasets[i].strokeColor;\n\t\t\t\tfor (var j=0; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tvar barOffset = yAxisPosX + config.barValueSpacing + valueHop*j + barWidth*i + config.barDatasetSpacing*i + config.barStrokeWidth*i;\n\t\t\t\t\t\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(barOffset, xAxisPosY);\n\t\t\t\t\tctx.lineTo(barOffset, xAxisPosY - animPc*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)+(config.barStrokeWidth/2));\n\t\t\t\t\tctx.lineTo(barOffset + barWidth, xAxisPosY - animPc*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)+(config.barStrokeWidth/2));\n\t\t\t\t\tctx.lineTo(barOffset + barWidth, xAxisPosY);\n\t\t\t\t\tif(config.barShowStroke){\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tctx.fill();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tfunction drawScale(){\n\t\t\t//X axis line\n\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(width-widestXLabel/2+5,xAxisPosY);\n\t\t\tctx.lineTo(width-(widestXLabel/2)-xAxisLength-5,xAxisPosY);\n\t\t\tctx.stroke();\n\t\t\t\n\t\t\t\n\t\t\tif (rotateLabels > 0){\n\t\t\t\tctx.save();\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t}\n\t\t\tctx.fillStyle = config.scaleFontColor;\n\t\t\tfor (var i=0; i<data.labels.length; i++){\n\t\t\t\tctx.save();\n\t\t\t\tif (rotateLabels > 0){\n\t\t\t\t\tctx.translate(yAxisPosX + i*valueHop,xAxisPosY + config.scaleFontSize);\n\t\t\t\t\tctx.rotate(-(rotateLabels * (Math.PI/180)));\n\t\t\t\t\tctx.fillText(data.labels[i], 0,0);\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\t\tctx.fillText(data.labels[i], yAxisPosX + i*valueHop + valueHop/2,xAxisPosY + config.scaleFontSize+3);\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(yAxisPosX + (i+1) * valueHop, xAxisPosY+3);\n\t\t\t\t\n\t\t\t\t//Check i isnt 0, so we dont go over the Y axis twice.\n\t\t\t\t\tctx.lineWidth = config.scaleGridLineWidth;\n\t\t\t\t\tctx.strokeStyle = config.scaleGridLineColor;\t\t\t\t\t\n\t\t\t\t\tctx.lineTo(yAxisPosX + (i+1) * valueHop, 5);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t\t\n\t\t\t//Y axis\n\t\t\tctx.lineWidth = config.scaleLineWidth;\n\t\t\tctx.strokeStyle = config.scaleLineColor;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(yAxisPosX,xAxisPosY+5);\n\t\t\tctx.lineTo(yAxisPosX,5);\n\t\t\tctx.stroke();\n\t\t\t\n\t\t\tctx.textAlign = \"right\";\n\t\t\tctx.textBaseline = \"middle\";\n\t\t\tfor (var j=0; j<calculatedScale.steps; j++){\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(yAxisPosX-3,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\tif (config.scaleShowGridLines){\n\t\t\t\t\tctx.lineWidth = config.scaleGridLineWidth;\n\t\t\t\t\tctx.strokeStyle = config.scaleGridLineColor;\n\t\t\t\t\tctx.lineTo(yAxisPosX + xAxisLength + 5,xAxisPosY - ((j+1) * scaleHop));\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tctx.lineTo(yAxisPosX-0.5,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctx.stroke();\n\t\t\t\tif (config.scaleShowLabels){\n\t\t\t\t\tctx.fillText(calculatedScale.labels[j],yAxisPosX-8,xAxisPosY - ((j+1) * scaleHop));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tfunction calculateXAxisSize(){\n\t\t\tvar longestText = 1;\n\t\t\t//if we are showing the labels\n\t\t\tif (config.scaleShowLabels){\n\t\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize+\"px \" + config.scaleFontFamily;\n\t\t\t\tfor (var i=0; i<calculatedScale.labels.length; i++){\n\t\t\t\t\tvar measuredText = ctx.measureText(calculatedScale.labels[i]).width;\n\t\t\t\t\tlongestText = (measuredText > longestText)? measuredText : longestText;\n\t\t\t\t}\n\t\t\t\t//Add a little extra padding from the y axis\n\t\t\t\tlongestText +=10;\n\t\t\t}\n\t\t\txAxisLength = width - longestText - widestXLabel;\n\t\t\tvalueHop = Math.floor(xAxisLength/(data.labels.length));\t\n\t\t\t\n\t\t\tbarWidth = (valueHop - config.scaleGridLineWidth*2 - (config.barValueSpacing*2) - (config.barDatasetSpacing*data.datasets.length-1) - ((config.barStrokeWidth/2)*data.datasets.length-1))/data.datasets.length;\n\t\t\t\n\t\t\tyAxisPosX = width-widestXLabel/2-xAxisLength;\n\t\t\txAxisPosY = scaleHeight + config.scaleFontSize/2;\t\t\t\t\n\t\t}\t\t\n\t\tfunction calculateDrawingSizes(){\n\t\t\tmaxSize = height;\n\n\t\t\t//Need to check the X axis first - measure the length of each text metric, and figure out if we need to rotate by 45 degrees.\n\t\t\tctx.font = config.scaleFontStyle + \" \" + config.scaleFontSize+\"px \" + config.scaleFontFamily;\n\t\t\twidestXLabel = 1;\n\t\t\tfor (var i=0; i<data.labels.length; i++){\n\t\t\t\tvar textLength = ctx.measureText(data.labels[i]).width;\n\t\t\t\t//If the text length is longer - make that equal to longest text!\n\t\t\t\twidestXLabel = (textLength > widestXLabel)? textLength : widestXLabel;\n\t\t\t}\n\t\t\tif (width/data.labels.length < widestXLabel){\n\t\t\t\trotateLabels = 45;\n\t\t\t\tif (width/data.labels.length < Math.cos(rotateLabels) * widestXLabel){\n\t\t\t\t\trotateLabels = 90;\n\t\t\t\t\tmaxSize -= widestXLabel; \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmaxSize -= Math.sin(rotateLabels) * widestXLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmaxSize -= config.scaleFontSize;\n\t\t\t}\n\t\t\t\n\t\t\t//Add a little padding between the x line and the text\n\t\t\tmaxSize -= 5;\n\t\t\t\n\t\t\t\n\t\t\tlabelHeight = config.scaleFontSize;\n\t\t\t\n\t\t\tmaxSize -= labelHeight;\n\t\t\t//Set 5 pixels greater than the font size to allow for a little padding from the X axis.\n\t\t\t\n\t\t\tscaleHeight = maxSize;\n\t\t\t\n\t\t\t//Then get the area above we can safely draw on.\n\t\t\t\n\t\t}\t\t\n\t\tfunction getValueBounds() {\n\t\t\tvar upperValue = Number.MIN_VALUE;\n\t\t\tvar lowerValue = Number.MAX_VALUE;\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tfor (var j=0; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tif ( data.datasets[i].data[j] > upperValue) { upperValue = data.datasets[i].data[j] };\n\t\t\t\t\tif ( data.datasets[i].data[j] < lowerValue) { lowerValue = data.datasets[i].data[j] };\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tvar maxSteps = Math.floor((scaleHeight / (labelHeight*0.66)));\n\t\t\tvar minSteps = Math.floor((scaleHeight / labelHeight*0.5));\n\t\t\t\n\t\t\treturn {\n\t\t\t\tmaxValue : upperValue,\n\t\t\t\tminValue : lowerValue,\n\t\t\t\tmaxSteps : maxSteps,\n\t\t\t\tminSteps : minSteps\n\t\t\t};\n\t\t\t\n\t\n\t\t}\n\t}\n\t\n\tfunction calculateOffset(val,calculatedScale,scaleHop){\n\t\tvar outerValue = calculatedScale.steps * calculatedScale.stepValue;\n\t\tvar adjustedValue = val - calculatedScale.graphMin;\n\t\tvar scalingFactor = CapValue(adjustedValue/outerValue,1,0);\n\t\treturn (scaleHop*calculatedScale.steps) * scalingFactor;\n\t}\n\t\n\tfunction animationLoop(config,drawScale,drawData,ctx){\n\t\tvar animFrameAmount = (config.animation)? 1/CapValue(config.animationSteps,Number.MAX_VALUE,1) : 1,\n\t\t\teasingFunction = animationOptions[config.animationEasing],\n\t\t\tpercentAnimComplete =(config.animation)? 0 : 1;\n\t\t\n\t\n\t\t\n\t\tif (typeof drawScale !== \"function\") drawScale = function(){};\n\t\t\n\t\trequestAnimFrame(animLoop);\n\t\t\n\t\tfunction animateFrame(){\n\t\t\tvar easeAdjustedAnimationPercent =(config.animation)? CapValue(easingFunction(percentAnimComplete),null,0) : 1;\n\t\t\tclear(ctx);\n\t\t\tif(config.scaleOverlay){\n\t\t\t\tdrawData(easeAdjustedAnimationPercent);\n\t\t\t\tdrawScale();\n\t\t\t} else {\n\t\t\t\tdrawScale();\n\t\t\t\tdrawData(easeAdjustedAnimationPercent);\n\t\t\t}\t\t\t\t\n\t\t}\n\t\tfunction animLoop(){\n\t\t\t//We need to check if the animation is incomplete (less than 1), or complete (1).\n\t\t\t\tpercentAnimComplete += animFrameAmount;\n\t\t\t\tanimateFrame();\t\n\t\t\t\t//Stop the loop continuing forever\n\t\t\t\tif (percentAnimComplete <= 1){\n\t\t\t\t\trequestAnimFrame(animLoop);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif (typeof config.onAnimationComplete == \"function\") config.onAnimationComplete();\n\t\t\t\t}\n\t\t\t\n\t\t}\t\t\n\t\t\n\t}\n\n\t//Declare global functions to be called within this namespace here.\n\t\n\t\n\t// shim layer with setTimeout fallback\n\tvar requestAnimFrame = (function(){\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\twindow.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t})();\n\n\tfunction calculateScale(drawingHeight,maxSteps,minSteps,maxValue,minValue,labelTemplateString){\n\t\t\tvar graphMin,graphMax,graphRange,stepValue,numberOfSteps,valueRange,rangeOrderOfMagnitude,decimalNum;\n\t\t\t\n\t\t\tvalueRange = maxValue - minValue;\n\t\t\t\n\t\t\trangeOrderOfMagnitude = calculateOrderOfMagnitude(valueRange);\n\n        \tgraphMin = Math.floor(minValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);\n            \n            graphMax = Math.ceil(maxValue / (1 * Math.pow(10, rangeOrderOfMagnitude))) * Math.pow(10, rangeOrderOfMagnitude);\n            \n            graphRange = graphMax - graphMin;\n            \n            stepValue = Math.pow(10, rangeOrderOfMagnitude);\n            \n\t        numberOfSteps = Math.round(graphRange / stepValue);\n\t        \n\t        //Compare number of steps to the max and min for that size graph, and add in half steps if need be.\t        \n\t        while(numberOfSteps < minSteps || numberOfSteps > maxSteps) {\n\t        \tif (numberOfSteps < minSteps){\n\t\t\t        stepValue /= 2;\n\t\t\t        numberOfSteps = Math.round(graphRange/stepValue);\n\t\t        }\n\t\t        else{\n\t\t\t        stepValue *=2;\n\t\t\t        numberOfSteps = Math.round(graphRange/stepValue);\n\t\t        }\n\t        };\n\n\t        var labels = [];\n\t        populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue);\n\t\t\n\t        return {\n\t\t        steps : numberOfSteps,\n\t\t\t\tstepValue : stepValue,\n\t\t\t\tgraphMin : graphMin,\n\t\t\t\tlabels : labels\t\t        \n\t\t        \n\t        }\n\t\t\n\t\t\tfunction calculateOrderOfMagnitude(val){\n\t\t\t  return Math.floor(Math.log(val) / Math.LN10);\n\t\t\t}\t\t\n\n\n\t}\n\n    //Populate an array of all the labels by interpolating the string.\n    function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {\n        if (labelTemplateString) {\n            //Fix floating point errors by setting to fixed the on the same decimal as the stepValue.\n            for (var i = 1; i < numberOfSteps + 1; i++) {\n                labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));\n            }\n        }\n    }\n\t\n\t//Max value from array\n\tfunction Max( array ){\n\t\treturn Math.max.apply( Math, array );\n\t};\n\t//Min value from array\n\tfunction Min( array ){\n\t\treturn Math.min.apply( Math, array );\n\t};\n\t//Default if undefined\n\tfunction Default(userDeclared,valueIfFalse){\n\t\tif(!userDeclared){\n\t\t\treturn valueIfFalse;\n\t\t} else {\n\t\t\treturn userDeclared;\n\t\t}\n\t};\n\t//Is a number function\n\tfunction isNumber(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t}\n\t//Apply cap a value at a high or low number\n\tfunction CapValue(valueToCap, maxValue, minValue){\n\t\tif(isNumber(maxValue)) {\n\t\t\tif( valueToCap > maxValue ) {\n\t\t\t\treturn maxValue;\n\t\t\t}\n\t\t}\n\t\tif(isNumber(minValue)){\n\t\t\tif ( valueToCap < minValue ){\n\t\t\t\treturn minValue;\n\t\t\t}\n\t\t}\n\t\treturn valueToCap;\n\t}\n\tfunction getDecimalPlaces (num){\n\t\tvar numberOfDecimalPlaces;\n\t\tif (num%1!=0){\n\t\t\treturn num.toString().split(\".\")[1].length\n\t\t}\n\t\telse{\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t} \n\t\n\tfunction mergeChartConfig(defaults,userDefined){\n\t\tvar returnObj = {};\n\t    for (var attrname in defaults) { returnObj[attrname] = defaults[attrname]; }\n\t    for (var attrname in userDefined) { returnObj[attrname] = userDefined[attrname]; }\n\t    return returnObj;\n\t}\n\t\n\t//Javascript micro templating by John Resig - source at http://ejohn.org/blog/javascript-micro-templating/\n\t  var cache = {};\n\t \n\t  function tmpl(str, data){\n\t    // Figure out if we're getting a template, or if we need to\n\t    // load the template - and be sure to cache the result.\n\t    var fn = !/\\W/.test(str) ?\n\t      cache[str] = cache[str] ||\n\t        tmpl(document.getElementById(str).innerHTML) :\n\t     \n\t      // Generate a reusable function that will serve as a template\n\t      // generator (and which will be cached).\n\t      new Function(\"obj\",\n\t        \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\t       \n\t        // Introduce the data as local variables using with(){}\n\t        \"with(obj){p.push('\" +\n\t       \n\t        // Convert the template into pure JavaScript\n\t        str\n\t          .replace(/[\\r\\t\\n]/g, \" \")\n\t          .split(\"<%\").join(\"\\t\")\n\t          .replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\")\n\t          .replace(/\\t=(.*?)%>/g, \"',$1,'\")\n\t          .split(\"\\t\").join(\"');\")\n\t          .split(\"%>\").join(\"p.push('\")\n\t          .split(\"\\r\").join(\"\\\\'\")\n\t      + \"');}return p.join('');\");\n\t   \n\t    // Provide some basic currying to the user\n\t    return data ? fn( data ) : fn;\n\t  };\n}\n\n\n"],"sourceRoot":"/source/"}